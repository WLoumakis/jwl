################################################################################
# This is the official grammar for the JWL Programming Language.
# It is similar to Extended Backus-Naur Form (EBNF), but there are some slight
# differences that are -- in my opinion -- improvements.
# 
# Terminal symbols (keywords, basic types, symbols, etc.) are indicated by
# SCREAMING_SNAKE_CASE.
# 
# Non-terminals symbols are indicated by kebab-case.
# 
# The end of file is designated by the $ character.
################################################################################

### JWL Program
# A JWL program can be characterized by zero-or-more:
#   - includes
#   - declarations
#   - definitions
#   - comments
# which eventually are terminated by the end of file character.

program : include* program
        | declaration* program
        | definition* program
        | comment* program
        | $
        ;

### Comments
# Comments in JWL, much like in other languages, are skipped over during lexing and therefore excluded from compilation.
#
# A single-line comment in JWL looks like:
#   // some text
# A multi-line comment in JWL looks like:
#   /[
#       some text
#       that can
#       span multiple
#       lines
#   /]
# Yes, I did include carriage returns for all you filthy Windows developers.
# That doesn't change my thinking that you should just grow up and code on Linux.

comment : FORWARD_SLASH FORWARD_SLASH .* \r?\n
        | FORWARD_SLASH LEFT_ANGLE_BRACKET (.\r\n)* FORWARD_SLASH RIGHT_ANGLE_BRACKET
        ;

### Types
# Types are pretty important to strongly-typed languages, so they come early.

type : user-defined-type
     | built-in-type
     ;

# Yep, a user-defined type is just an identifier or templated type.
user-defined-type : identifier
                  | templated-type
                  ;

templated-type : identifier LEFT_ANGLE_BRACKET type-list RIGHT_ANGLE_BRACKET
               ;

type-list : type (COMMA type)*
          ;

# Identifiers must start with a letter or underscore, then are followed by any of the listed characters
identifier : [_a-zA-Z][_a-zA-Z0-9/\?'\"~!@#$%\^&\*\-=\+\\\|]*
           ;

# No character, only string! After all, a character is just a string with length 1.
built-in-type : INTEGER
              | REAL
              | BOOLEAN
              | STRING
              ;

# While we're on the topic of built-in types...
number : hex-literal
       | decimal-literal
       | octal-literal
       | binary-literal
       ;

hex-literal : 0x[0-9A-Fa-f]+
            ;

decimal-literal : [0-9]+(\.[0-9]+)?
                ;

octal-literal : 0o[0-7]+
              ;

binary-literal : 0b[0-1]+
               ;

boolean-literal : TRUE
                | FALSE
                ;

string-literal : QUOTATION_MARK .* QUOTATION_MARK
               | APOSTROPHE .* APOSTROPHE
               | BACKTICK .* BACKTICK
               ;

### Includes
# Includes in JWL look like this:
#   include 'path/to/file'
# OR
#   include "path/to/file"
# OR
#   include `path/to/file`

include : INCLUDE string-literal
        ;

### Definitions
# A definition is an explicit instantiation of an object or variable.
# 
# For example,
#   `var a`
# is a declaration, not a definition, but...
#   `var a = 10`
# is a definition since it assigns a value to the variable `a`.
# 
# Classes and functions are a bit trickier since they are defined by their itnernals, but they
# both can still be declared but not defined.

definition : class-definition
           | function-definition
           | variable-definition
           | type-definition
           ;

## Classes!
# Class definitions should look something like this:
#   ```
#   class this-is-a-class : perhaps-another {
#       // ...
#   }
#   ```

class-definition : CLASS identifier inheritance-list? LEFT_BRACE class-block RIGHT_BRACE
                 ;

class-block : visibility-section
            | statement*
            ;

visibility-section : visibility-modifier COLON statement*
                   ;

inheritance-list : COLON identifier-list
                 ;

identifier-list : identifier (COMMA identifier)*
                ;
## Functions!
# Function definitions should look something like this:
#   ```
#   int sum-two-nums(int a, int b) {
#       return a + b
#   }
#   ```

# In this case, 'type' indicates return type.
function-definition : type identifier LEFT_PARENTHESIS parameter-list? RIGHT_PARENTHESIS block
                    ;

parameter-list : type identifier (COMMA parameter-list)?
               ;

## Variables!
# Variable definitions should look something like this:
#   ```
#   int c = a + b
#   ```

variable-definition : type identifier EQUALS expression
                    ;

