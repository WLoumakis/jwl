################################################################################
# This is the official grammar for the JWL Programming Language.
# It is similar to Extended Backus-Naur Form (EBNF), but there are some slight
# differences that are -- in my opinion -- improvements.
# 
# Comments in the grammar are indicated by an octothorpe (#).
# 
# Terminal symbols (keywords, basic types, symbols, etc.) are indicated by
# SCREAMING_SNAKE_CASE.
# 
# Non-terminals symbols are indicated by kebab-case.
# 
# The end of file is designated by the $ character.
################################################################################

# So, zero-or-more includes, declarations, and/or definitions, followed by the end of file
program : include* program
        | declaration* program
        | definition* program
        | $
        ;

### Types
# Types are pretty important to strongly-typed languages, so they come early.

type : user-defined-type
     | built-in-type
     ;

# Yep, a user-defined type is just an identifier or templated type.
user-defined-type : identifier
                  | templated-type
                  ;

templated-type : identifier LEFT_ANGLE_BRACKET type [COMMA type]* RIGHT_ANGLE_BRACKET
               ;

# Identifiers must start with a letter or underscore(s), then are followed by any of the listed characters
identifier : _*[a-zA-Z][_a-zA-Z0-9/\?;:'\"\{\}`~!@#$%\^&\*\-=\+\\\|]*
           ;

# No character, only string! After all, a character is just a string with length 1.
built-in-type : INTEGER
              | REAL
              | BOOLEAN
              | STRING
              ;

# While we're on the topic of built-in types...
integer-literal : "0"
                | "-"?[1-9][0-9]*
                ;

# Yes, you must include a number -- even if it's just 0 -- before the decimal, and if you include a decimal you better have a number after it, you filthy heathen.
real-literal : "-"?[0-9]+ DOT [0-9]+
             ;

boolean-literal : TRUE
                | FALSE
                ;

hex-literal : "0x"[0-9A-Fa-f]+
            ;

string-literal : quote-character .* quote-character
               ;

quote-character : QUOTATION_MARK
                | APOSTROPHE
                ;

### Includes
# Includes in JWL look like this:
#   `include 'path/to/file'`
# OR
#   `include "path/to/file"`

include : INCLUDE string-literal
        ;

### Definitions
# A definition is an explicit instantiation of an object or variable.
# 
# For example,
#   `var a`
# is a declaration, not a definition, but...
#   `var a = 10`
# is a definition since it assigns a value to the variable `a`.
# 
# Classes and functions are a bit trickier since they are defined by their itnernals, but they
# both can still be declared but not defined.

definition : class-definition
           | function-definition
           | variable-definition
           | type-definition
           ;

## Classes!
# Class definitions should look something like this:
#   ```
#   class this-is-a-class : perhaps-another {
#       // ...
#   }
#   ```

class-definition : CLASS identifier inheritance-list? block
                 ;

inheritance-list : COLON identifier-list
                 ;

identifier-list : identifier (COMMA identifier-list)*
                ;
## Functions!
# Function definitions should look something like this:
#   ```
#   int sum-two-nums(int a, int b) {
#       return a + b
#   }
#   ```

# In this case, 'type' indicates return type.
function-definition : type identifier LEFT_PARENTHESIS parameter-list? RIGHT_PARENTHESIS block
                    ;

parameter-list : type identifier (COMMA parameter-list)*
               ;

## Variables!
# Variable definitions should look something like this:
#   ```
#   int c = a + b
#   ```

variable-definition : type identifier EQUALS expression
                    ;

